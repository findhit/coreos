#!/usr/bin/env node
require('console.table');

var Stack = require( 'stack-queue' );
var Util = require( 'findhit-util' );
var yargs = require( 'yargs' );
var package = require( '../package' );

var stack = new Stack();

// Global options
var goptions = {
    'debug': {
        default: false,
        describe: 'activates debug messages',
        type: 'boolean',
    },
    'configIgnore': {
        alias: 'i',
        default: false,
        describe: 'ignore coreos json config file',
        type: 'boolean',
    },
    'configPath': {
        alias: 'c',
        default: process.cwd() + '/.coreos.json',
        describe: 'path to coreos json config file, if not provided, will default to your "/current/working/dir/.coreos.json"',
        type: 'string',
    },
};

var args = yargs
    .version( package.version )
    .usage( 'coreos <commands> [options]' )
    .options( goptions )

  // Commands
    .command( 'account', 'manage multiple providers accounts', function ( yargs ) {
        yargs
            .options( goptions )

            .command( 'add', 'adds an account', function ( yargs ) {
                var args = yargs
                    .options(Util.extend({}, goptions, {

                        provider: {
                            alias: 'p',
                            default: 'Azure',
                            describe: 'IaaS provider',
                            demand: true,
                            type: 'string',
                        },

                        'azure-subscription': {
                            alias: 'a-sub',
                            default: undefined,
                            describe: 'Azure Subscription',
                            type: 'string',
                        },

                        'azure-pem': {
                            alias: 'a-pem',
                            default: undefined,
                            describe: 'Azure Certificate',
                            type: 'string',
                        },

                    }))

                    .help( 'h' ).alias( 'h', 'help' )
                    .argv;

                // Code
                stack.queue(function ( cos ) {
                    var Account = cos.constructor.Account;
                    var account = {};

                    account.provider = args.provider;

                    if ( ! Account.Provider[ account.provider ] ) {
                        throw new Error( "account provider not supported" );
                    }

                    // Gather data from options
                    Util.Object.each( args, function ( value, option ) {
                        var key = option.replace( account.provider.toLowerCase()+'-', '' );

                        if ( option !== key ) {
                            account[ key ] = value;
                        }
                    });

                    // Construct
                    account = cos.constructor.Account.createFromProvider( account, cos );

                    // Now save it into accounts
                    account.save();

                    console.log( account.id );
                });
            })

            .command( 'remove', 'removes an account', function ( yargs ) {
                var args = yargs
                    .options(Util.extend({}, goptions, {

                        'account': {
                            alias: 'a',
                            default: undefined,
                            describe: 'Account id',
                            demand: true,
                            type: 'string',
                        },

                    }))

                    .help( 'h' ).alias( 'h', 'help' )
                    .argv;

                if ( ! args.account ) {
                    throw new Error( "please provide an account id" );
                }

                stack.queue(function ( cos ) {
                    cos.accountRemove( args.account );
                });
            })

            .command( 'setCurrent', 'sets an account as current/default', function ( yargs ) {
                var args = yargs
                    .options(Util.extend({}, goptions, {

                        'account': {
                            alias: 'a',
                            default: undefined,
                            describe: 'Account id',
                            demand: true,
                            type: 'string',
                        },

                    }))

                    .help( 'h' ).alias( 'h', 'help' )
                    .argv;

                if ( ! args.account ) {
                    throw new Error( "please provide an account id" );
                }

                stack.queue(function ( cos ) {
                    var account = cos.accountCurrent( args.account );
                    console.log( "current account set as " + account.id );
                });
            })

            .command( 'get', 'gets an account info', function ( yargs ) {
                var args = yargs
                    .options(Util.extend({}, goptions, {

                        'account': {
                            alias: 'a',
                            default: undefined,
                            describe: 'Account id',
                            demand: true,
                            type: 'string',
                        },

                    }))

                    .help( 'h' ).alias( 'h', 'help' )
                    .argv;

                if ( ! args.account ) {
                    throw new Error( "please provide an account id" );
                }

                stack.queue(function ( cos ) {
                    var account = cos.accountGet( args.account );
                    console.log( account );
                });
            })

            .command( 'list', 'gets all available accounts', function ( yargs ) {
                var args = yargs
                    .options(Util.extend({}, goptions, {}))

                    .help( 'h' ).alias( 'h', 'help' )
                    .argv;

                stack.queue(function ( cos ) {
                    var accounts = cos.accountList();
                    var ids = Object.keys( accounts );

                    if ( ids.length === 0 ) {
                        console.log( "there aren't any configured accounts" );
                        return;
                    }

                    accounts = ids.map(function ( id ) {
                        var account = accounts[ id ];
                        return {
                            id: account.id,
                            provider: account.provider
                        };
                    });

                    console.table( accounts );
                });
            })

            .demand( 2, 'Please provide a account command' )
            .help( 'h' ).alias( 'h', 'help' )
            .argv;
    })
    .command( 'node', 'manage cluster nodes', function ( yargs ) {
        var args = yargs
            .options( goptions )

            .command( 'create', 'creates a node on the cluster', function ( yargs ) {
                var args = yargs
                    .options({
                        'discovery': {
                            alias: 'd',
                            describe: 'As cloud-config is auto-generated you could specify which discovery endpoint it should be working',
                            type: 'string',
                        }
                    })
                    .argv;

            })

            .command( 'destroy', 'destroys a node from the cluster', function ( yargs ) {

            })

            .command( 'get', 'gets a node info', function ( yargs ) {

            })

            .command( 'list', 'gets all available nodes', function ( yargs ) {

            })

            .command( 'exec', 'executes a command on a node', function ( yargs ) {

            })

            .command( 'ssh', 'ssh into a node', function ( yargs ) {

            })

            .demand( 2, 'Please provide a account command' )
            .help( 'h' ).alias( 'h', 'help' )
            .argv;
    })

    .command( 'config', 'manage config file', function ( yargs ) {
        yargs
        .options( goptions )


        .command( 'print', 'prints out configuration', function () {
            stack.queue(function ( cos ) {
                console.log( cos.config );
            });
        })

        .command( 'reset', 'WARNING!! cleans up your config', function () {
            stack.queue(function ( cos ) {
                Util.Object.each( cos.config, function ( v, i, config ) {
                    delete config[ i ];
                });

                console.log( "config reset complete!" );
            });
        })

        .demand( 2, 'Please provide a account command' )
        .help( 'h' ).alias( 'h', 'help' )
        .argv;
    })

    // TODO
    .command( 'deploy', 'deploy and manage services', function () {
        console.log( "not available yet" );
        process.exit( 1 );
    })

    // TODO
    .command( 'doctor', 'checks cluster health', function () {
        console.log( "not available yet" );
        process.exit( 1 );
    })

    .demand( 1, 'Please provide a command' )
    .help( 'h' ).alias( 'h', 'help' )
    .argv;

// If we don't have nothing to do, exit
if ( stack.length === 0 ) {
    console.log( 'nothing to do, exiting...' );
    process.exit( 1 );
}

// Handle debug
process.env.DEBUG = args.debug ? 'coreos:*' : '';

var CoreOS = require( '../lib' );

var cos = new CoreOS({
    configPath: ! args.configIgnore && args.configPath || false,
    loadConfigOnInit: ! args.configIgnore,
});

// Handle async things trough stack
stack.dispatch( cos )
.then(function () {
    if ( ! args.configIgnore ) {
        cos.configSave();
    }
}, function ( err ) {
    console.log([
"",
"+'####'++'+',,:+#@###@#@;;;;. ';''#:+####+::,.,+@@+.;'';@+'''';'#######@#######+",
"+',`.`#:```@,##`  .@@#+````.'##```.@#```'';..;@`  .'@,```@,.``@,..``.,`.......@'",
"+'.   @:   @+;`     @@+   ``  @;   #;```@,,:,@    ` @``  @.   @.   ``,        @'",
":',   @,   @@```  ``.@' `` ` ``@   '`` .+,,.+```  ` @    @.   @. `   .`       @'",
"'+,   #,   @:` `#;`  #' ` @.   @.  ,  `#...`@ ` `@#`#`   @.   @.   ';+:,`   :,@+",
";+,   @:   @`  `@@   +'  `@;  `@#      #`...#````@;@#`  `@,   @.   @@@+#.   #+++",
"+#.        @   .@#   :+ `.#.  `@#     ::  `.:;````+;@`        @.     #+#`   @+++",
"+#,    `   @   .@@   ,+  `` ` +@#'`   #;`````@`` ``#+`        @.     ++#`   @'++",
"+#.      ` @   `@@   :+      ####@    @##+.`+ @.    @`        @. `   ++#`   @+++",
"'+,   @: ` @   .@@   '+   ` `;###@   ,#####`##.@`` `@`  `@,   @. ` @#@'#`   @+++",
"'#.   @, ` @.   @+   #+   + ` @##@ ` ,@####@#`#@:`  @`   @.   @.   @#@##`   @++;",
"'#.   @, ` @#    `   #'   @   +##@ ` ,@#####@  `  ``@.   @.   @.     .##`   @+''",
";+.   @,   ##.      '#+   @`  `@#@ ` ,@#####@ `    `@`   @.   @. `   .##`   @+''",
";+.   @,   #+@``  `'#@'   #'   ##@  `,@#####@:   `,@@`   @.   @.     .##``  @+';",
";+@@@@#@@@@@+##@########@@##@@@##@@@@@#@######@##@+;@#@@@#@@@@@@@@@@@@##@@@##'''",
"","HORY SHET!! An error has occured!!1",""
].join( "\n" ));
    console.error( err.stack );
    process.exit( err && err.statusCode || 127 );
});
