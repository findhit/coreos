#!/usr/bin/env node
require('console.table');

var Stack = require( 'stack-queue' );
var Util = require( 'findhit-util' );
var yargs = require( 'yargs' );
var package = require( '../package' );
var Promise = require( 'bluebird' );

var stack = new Stack();

// Global options
var goptions = {
    'debug': {
        default: false,
        describe: 'activates debug messages',
        type: 'boolean',
    },
    'configIgnore': {
        alias: 'i',
        default: false,
        describe: 'ignore coreos json config file',
        type: 'boolean',
    },
    'configPath': {
        alias: 'c',
        default: process.cwd() + '/.coreos.json',
        describe: 'path to coreos json config file, if not provided, will default to your "/current/working/dir/.coreos.json"',
        type: 'string',
    },
};

var args = yargs
    .version( package.version )
    .usage( 'coreos <commands> [options]' )
    .options( goptions )

  // Commands
    .command( 'account', 'manage multiple providers accounts', function ( yargs ) {
        yargs
            .options( goptions )

            .command( 'add', 'adds an account', function ( yargs ) {
                var args = yargs
                    .options(Util.extend({}, goptions, {

                        provider: {
                            alias: 'p',
                            describe: 'IaaS provider',
                            demand: true,
                            type: 'string',
                        },

                        'azure-subscription': {
                            alias: 'a-sub',
                            default: undefined,
                            describe: 'Azure Subscription',
                            type: 'string',
                        },

                        'azure-pem-path': {
                            alias: 'a-pem-path',
                            default: undefined,
                            describe: 'Azure Certificate',
                            type: 'string',
                        },

                    }))

                    .help( 'h' ).alias( 'h', 'help' )
                    .argv;

                // Code
                stack.queue(function ( cos ) {
                    var Account = cos.constructor.Account;
                    var account = {};

                    account.provider = args.provider;

                    if ( ! Account.Provider[ account.provider ] ) {
                        throw new Error( "account provider not supported" );
                    }

                    // Gather data from options
                    Util.Object.each( args, function ( value, option ) {
                        var key = option.replace( account.provider.toLowerCase()+'-', '' );

                        if ( option !== key ) {
                            key = key.replace(/(\-[a-z])/g, function ( l ){
                                return l.toUpperCase().replace('-','');
                            });

                            account[ key ] = value;
                        }
                    });

                    // Construct
                    account = cos.constructor.Account.createFromProvider( account, cos );

                    // Now save it into accounts
                    account.save();

                    console.log( account.id );
                });
            })

            .command( 'remove', 'removes an account', function ( yargs ) {
                var args = yargs
                    .options(Util.extend({}, goptions, {

                        'account': {
                            alias: 'a',
                            default: undefined,
                            describe: 'Account id',
                            demand: true,
                            type: 'string',
                        },

                    }))

                    .help( 'h' ).alias( 'h', 'help' )
                    .argv;

                if ( ! args.account ) {
                    throw new Error( "please provide an account id" );
                }

                stack.queue(function ( cos ) {
                    cos.accountRemove( args.account );
                });
            })

            .command( 'setCurrent', 'sets an account as current/default', function ( yargs ) {
                var args = yargs
                    .options(Util.extend({}, goptions, {

                        'account': {
                            alias: 'a',
                            default: undefined,
                            describe: 'Account id',
                            demand: true,
                            type: 'string',
                        },

                    }))

                    .help( 'h' ).alias( 'h', 'help' )
                    .argv;

                if ( ! args.account ) {
                    throw new Error( "please provide an account id" );
                }

                stack.queue(function ( cos ) {
                    var account = cos.accountCurrent( args.account );
                    console.log( "current account set as " + account.id );
                });
            })

            .command( 'get', 'gets an account info', function ( yargs ) {
                var args = yargs
                    .options(Util.extend({}, goptions, {

                        'account': {
                            alias: 'a',
                            default: undefined,
                            describe: 'Account id',
                            demand: true,
                            type: 'string',
                        },

                    }))

                    .help( 'h' ).alias( 'h', 'help' )
                    .argv;

                if ( ! args.account ) {
                    throw new Error( "please provide an account id" );
                }

                stack.queue(function ( cos ) {
                    var account = cos.accountGet( args.account );
                    console.log( account );
                });
            })

            .command( 'list', 'gets all available accounts', function ( yargs ) {
                var args = yargs
                    .options(Util.extend({}, goptions, {}))

                    .help( 'h' ).alias( 'h', 'help' )
                    .argv;

                stack.queue(function ( cos ) {
                    var accounts = cos.accountList();
                    var ids = Object.keys( accounts );

                    if ( ids.length === 0 ) {
                        console.log( "there aren't any configured accounts" );
                        return;
                    }

                    accounts = ids.map(function ( id ) {
                        var account = accounts[ id ];
                        return {
                            id: id,
                            provider: account.provider
                        };
                    });

                    console.table( accounts );
                });
            })

            .demand( 2, 'Please provide a account command' )
            .help( 'h' ).alias( 'h', 'help' )
            .argv;
    })
    .command( 'node', 'manage cluster nodes', function ( yargs ) {
        var args = yargs
            .options( goptions )

            .command( 'create', 'creates a node on the cluster', function ( yargs ) {
                var args = yargs
                    .options(Util.extend({}, goptions, {

                        'numberOfNodes': {
                            describe: 'number of nodes that should be created',
                            default: 1,
                            demand: true,
                            type: 'integer',
                        },

                        'group': {
                            describe: 'Image group to be used: stable, beta or alpha',
                            default: 'stable',
                            type: 'string',
                        },
                        'role': {
                            describe: 'Role for current node: worker or services',
                            default: 'worker',
                            type: 'string',
                        },
                        'location': {
                            describe: 'Provider-based: location/region/zone where node should be launched',
                            default: 'North Europe',
                            type: 'string',
                        },
                        'size': {
                            describe: "Provider-based: machine's size where node will be deployed",
                            default: 'Small',
                            type: 'string',
                        },
                        'sshPort': {
                            describe: 'ssh port, for sshing into node',
                            default: 22,
                            type: 'integer',
                        },
                        'userName': {
                            describe: 'user name for sshing into node, should not be *root*',
                            default: 'core',
                            type: 'string',
                        },
                        'userPassword': {
                            describe: 'user password or false if you wish to disable password login',
                            type: 'string',
                        },
                        'persistent': {
                            describe: 'Will mark node as persistent when on an auto-scalling environment',
                            type: 'boolean',
                        },
                        'simulate': {
                            describe: 'Allows node simulation for debugging',
                            type: 'boolean',
                        },
                    }))
                    .help( 'h' ).alias( 'h', 'help' )
                    .argv;

                stack.queue(function ( cos ) {
                    var promise = Promise.cast();

                    for( var i = 0; i < args.numberOfNodes; i++ ) {
                        promise = promise.then(function () {
                            return cos.nodeCreate( args );
                        })
                        .then(function ( node ) {
                            console.log( node.id );
                        })
                        .then(function () {
                            if ( ! args.configIgnore ) {
                                cos.configSave();
                            }
                        });
                    }

                    return promise;
                });

            })

            .command( 'destroy', 'destroys a node from the cluster', function ( yargs ) {
                var args = yargs
                    .options(Util.extend({}, goptions, {
                        'node': {
                            alias: 'n',
                            describe: 'Node id',
                            demand: true,
                            type: 'string',
                        },
                    }))
                    .help( 'h' ).alias( 'h', 'help' )
                    .argv;

                if ( ! args.node ) {
                    throw new Error( "please provide an node id" );
                }

                stack.queue(function ( cos ) {
                    return cos.nodeDestroy( args.node )
                    .then(function ( node ) {
                        console.log( node.id );
                    });
                });
            })

            .command( 'get', 'gets a node info', function ( yargs ) {

            })

            .command( 'list', 'gets all available nodes', function ( yargs ) {
                var args = yargs
                    .options(Util.extend({}, goptions, {}))

                    .help( 'h' ).alias( 'h', 'help' )
                    .argv;

                stack.queue(function ( cos ) {
                    var nodes = cos.nodeList();
                    var ids = Object.keys( nodes );

                    if ( ids.length === 0 ) {
                        console.log( "there aren't any provisioned nodes" );
                        return;
                    }

                    nodes = ids.map(function ( id ) {
                        var node = nodes[ id ];
                        return {
                            id: id,
                            account: node.account,
                            role: node.role,
                            location: node.location,
                            persistent: node.persistent,
                            size: node.size,
                            host: node.host,
                            ip: node.ip,
                        };
                    });

                    console.table( nodes );
                });
            })

            .command( 'exec', 'executes a command on a node', function ( yargs ) {
                var args = yargs
                    .options(Util.extend({}, goptions, {
                        'node': {
                            alias: 'n',
                            describe: 'Node id',
                            demand: true,
                            type: 'string',
                            default: 'random'
                        },
                    }))
                    .help( 'h' ).alias( 'h', 'help' )
                    .argv;

                // remove commands from it (dirty hack)
                args._.splice( 0, 2 );

                if ( args._.length === 0 ) {
                    throw new Error( "Usage: coreos node exec -- [command]" );
                }

                stack.queue(function ( cos ) {
                    return cos.nodeExec( args.node, args._ )
                    .spread(function ( ssh, stream ) {
                        stream.pipe( process.stdout );
                        stream.stderr.pipe( process.stderr );
                    });
                });
            })

            .command( 'ssh', 'ssh into a node', function ( yargs ) {

                var args = yargs
                    .options(Util.extend({}, goptions, {
                        'node': {
                            alias: 'n',
                            describe: 'Node id',
                            demand: true,
                            type: 'string',
                        },
                    }))
                    .help( 'h' ).alias( 'h', 'help' )
                    .argv;

                if ( ! args.node ) {
                    throw new Error( "please provide an node id" );
                }

                stack.queue(function ( cos ) {
                    var ssh = cos.nodeSSH( args.node );

                    ssh.on( 'ready', function () {
                        ssh.shell(function ( err, stream ) {
                            if ( err ) {
                                process.exit( 1 );
                            }

                            // pipe input into string
                            process.stdin.pipe( stream );

                            // pipe stream output and err into process
                            stream.pipe( process.stdout );
                            stream.stderr.pipe( process.stderr );

                            stream.on( 'close', function() {
                                process.exit( 0 );
                            });
                        });
                    });
                });
            })

            .demand( 2, 'Please provide a account command' )
            .help( 'h' ).alias( 'h', 'help' )
            .argv;
    })

    .command( 'config', 'manage config file', function ( yargs ) {
        yargs
        .options( goptions )


        .command( 'print', 'prints out configuration', function () {
            stack.queue(function ( cos ) {
                console.log( cos.configJSON() );
            });
        })

        .command( 'reset', 'WARNING!! cleans up your config', function () {
            stack.queue(function ( cos ) {
                Util.Object.each( cos.config, function ( v, i, config ) {
                    delete config[ i ];
                });

                console.log( "config reset complete!" );
            });
        })

        .demand( 2, 'Please provide a account command' )
        .help( 'h' ).alias( 'h', 'help' )
        .argv;
    })

    .command( 'bootstrap', 'initializes a cluster', function ( yargs ) {
        var args = yargs
            .options(Util.extend({}, goptions, {

                'numberOfNodes': {
                    describe: 'number of nodes for initial cluster',
                    demand: true,
                    default: 3,
                    type: 'integer',
                },

                'account': {
                    describe: 'provider account to be used, if not defined, bootstrap will spread nodes accross accounts',
                    type: 'string',
                },

                'group': {
                    describe: 'Image group to be used: stable, beta or alpha',
                    default: 'stable',
                    type: 'string',
                },
                'location': {
                    describe: 'Provider-based: location/region/zone where node should be launched',
                    default: 'North Europe',
                    type: 'string',
                },
                'size': {
                    describe: "Provider-based: machine's size where node will be deployed",
                    default: 'Small',
                    type: 'string',
                },
            }))
            .help( 'h' ).alias( 'h', 'help' )
            .argv;

        stack.queue(function ( cos ) {
            return cos.bootstrap( args );
        });
    })

    .command( 'kill', 'destroys all nodes on the cluster', function ( yargs ) {
        var args = yargs
            .options(Util.extend({}, goptions, {

                'i-am': {
                    describe: 'you must set this as "sure"',
                    demand: true,
                    type: 'string',
                }

            }))
            .help( 'h' ).alias( 'h', 'help' )
            .argv;

        if ( args[ 'i-am' ] !== 'sure' ) {
            throw new Error( "please set 'i-am' as 'sure'" );
        }

        stack.queue(function ( cos ) {
            return cos.kill();
        });
    })

    .command( 'fleetctl', 'deploy and manage services', function ( yargs ) {
        var args = yargs
            .options(Util.extend({}, goptions))
            .help( 'h' ).alias( 'h', 'help' )
            .argv;

        // remove fleetctl from it (dirty hack)
        args._.splice( args._.indexOf( 'fleetctl' ), 1 );

        if ( args._.length === 0 ) {
            throw new Error( "Usage: coreos fleetctl -- [fleetctl options]" );
        }

        stack.queue(function ( cos ) {
            return cos.fleetctl( args._ )
            .spread(function ( ssh, stream ) {
                stream.pipe( process.stdout );
                stream.stderr.pipe( process.stderr );
            });
        });
    })

    .command( 'etcdctl', 'deploy and manage services', function ( yargs ) {
        var args = yargs
            .options(Util.extend({}, goptions))
            .help( 'h' ).alias( 'h', 'help' )
            .argv;

        // remove etcdctl from it (dirty hack)
        args._.splice( args._.indexOf( 'etcdctl' ), 1 );

        if ( args._.length === 0 ) {
            throw new Error( "Usage: coreos etcdctl -- [etcdctl options]" );
        }

        stack.queue(function ( cos ) {
            return cos.etcdctl( args._ )
            .spread(function ( ssh, stream ) {
                stream.pipe( process.stdout );
                stream.stderr.pipe( process.stderr );
            });
        });
    })

    // TODO
    .command( 'doctor', 'checks cluster health', function ( yargs ) {
        var args = yargs
            .options(Util.extend({}, goptions))
            .help( 'h' ).alias( 'h', 'help' )
            .argv;

        stack.queue(function ( cos ) {
            return cos.doctor();
        });
    })

    .demand( 1, 'Please provide a command' )
    .help( 'h' ).alias( 'h', 'help' )
    .argv;

// If we don't have nothing to do, exit
if ( stack.length === 0 ) {
    console.log( 'nothing to do, exiting...' );
    process.exit( 1 );
}

// Handle debug
process.env.DEBUG = args.debug ? 'coreos:*' : '';

var CoreOS = require( '../lib' );

var cos = new CoreOS({
    configPath: ! args.configIgnore && args.configPath || false,
    loadConfigOnInit: ! args.configIgnore,
});

// Handle async things trough stack
stack.dispatch( cos )
.then(function () {
    if ( ! args.configIgnore ) {
        cos.configSave();
    }
}, function ( err ) {
    console.log([
"",
"+'####'++'+',,:+#@###@#@;;;;. ';''#:+####+::,.,+@@+.;'';@+'''';'#######@#######+",
"+',`.`#:```@,##`  .@@#+````.'##```.@#```'';..;@`  .'@,```@,.``@,..``.,`.......@'",
"+'.   @:   @+;`     @@+   ``  @;   #;```@,,:,@    ` @``  @.   @.   ``,        @'",
":',   @,   @@```  ``.@' `` ` ``@   '`` .+,,.+```  ` @    @.   @. `   .`       @'",
"'+,   #,   @:` `#;`  #' ` @.   @.  ,  `#...`@ ` `@#`#`   @.   @.   ';+:,`   :,@+",
";+,   @:   @`  `@@   +'  `@;  `@#      #`...#````@;@#`  `@,   @.   @@@+#.   #+++",
"+#.        @   .@#   :+ `.#.  `@#     ::  `.:;````+;@`        @.     #+#`   @+++",
"+#,    `   @   .@@   ,+  `` ` +@#'`   #;`````@`` ``#+`        @.     ++#`   @'++",
"+#.      ` @   `@@   :+      ####@    @##+.`+ @.    @`        @. `   ++#`   @+++",
"'+,   @: ` @   .@@   '+   ` `;###@   ,#####`##.@`` `@`  `@,   @. ` @#@'#`   @+++",
"'#.   @, ` @.   @+   #+   + ` @##@ ` ,@####@#`#@:`  @`   @.   @.   @#@##`   @++;",
"'#.   @, ` @#    `   #'   @   +##@ ` ,@#####@  `  ``@.   @.   @.     .##`   @+''",
";+.   @,   ##.      '#+   @`  `@#@ ` ,@#####@ `    `@`   @.   @. `   .##`   @+''",
";+.   @,   #+@``  `'#@'   #'   ##@  `,@#####@:   `,@@`   @.   @.     .##``  @+';",
";+@@@@#@@@@@+##@########@@##@@@##@@@@@#@######@##@+;@#@@@#@@@@@@@@@@@@##@@@##'''",
"","HORY SHET!! An error has occured!!1",""
].join( "\n" ));
    console.error( err.stack );
    process.exit( err && err.statusCode || 127 );
});
